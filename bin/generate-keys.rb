require 'pathname'

class Extractor
  attr_accessor :name, :keys, :package

  def initialize(lines)
    @name = /object (\w+) (extends Plugin )*/.match(lines)[1]
    @is_plugin = /object \w+ extends Plugin /.match(lines)

    @package = /package (.*)/.match(lines)[1]
    @keys = lines.scan(/val (\w+) = \w+Key/).flat_map(&:compact)
  end

  def to_formatter(relative_path)
    if @is_plugin
      PluginFormatter.new(self, relative_path)
    else
      KeysFormatter.new(self, relative_path)
    end
  end

end

class Formatter
  attr_reader :ex, :relative_path

  def initialize(extractor, relative_path)
    @ex = extractor
    @relative_path = relative_path
  end

end

class PluginFormatter < Formatter
  def to_s
    s = <<-PLUGINS_TO_S
/* #{ex.name} (from #{relative_path}) */
import #{ex.package}.#{ex.name}
PLUGINS_TO_S
    ex.keys.each do |key|
      s = s + "val #{key} = #{ex.name}.#{key}\n"
    end
    "#{s}\n"
  end  
end

class KeysFormatter < Formatter
  def to_s
    s = <<-KEYS_TO_S
/* #{ex.name} (from #{relative_path}) */
KEYS_TO_S
    ex.keys.each do |key|
      s = s + "val #{key} = #{ex.package}.#{ex.name}.#{key}\n"
    end
    "#{s}\n"
  end
end

class ScalaFileHandler

  attr_reader :file

  def initialize(path)
    @file = File.basename(path, ".scala")
    @lines = File.readlines(path)
    @relative_path = Pathname.new(path).relative_path_from(Pathname.new(__FILE__) + "../..")
  end

  def is_eligible?
    @lines.grep(/object \w+ extends Plugin /).length > 0 || @lines.grep(/object Keys \{/).length > 0
  end

  def has_keys?
    @lines.grep(/val \w+ = \w+Key/).length > 0
  end

  def formatted
    ex = Extractor.new(@lines.join("\n")).to_formatter(@relative_path).to_s.split("\n").map { |line| "  #{line}" }.join("\n")
  end

end

class Main
  attr_accessor :path

  def initialize(path)
    self.path = path
  end

  def run

    puts <<-HEADER
package trafficland.opensource.sbt

/**
 * Collection of keys across all plugins.
 *
 * This file was generated by bin/generate-keys and should not be altered by hand.
 */
 object Keys {

 HEADER

    Dir.glob(self.path) do |file|
      sfh = ScalaFileHandler.new(file)
      if sfh.is_eligible? && sfh.has_keys?
        puts sfh.formatted
        puts "\n"
      end
    end
    
    puts "}"
  end
end

if __FILE__ == $PROGRAM_NAME
  main = Main.new("#{ARGV.first}/**/*.scala")
  main.run
end

